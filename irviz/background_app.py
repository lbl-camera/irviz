import warnings
from functools import partial

import dash
import dash_bootstrap_components as dbc
import dash_html_components as html
import h5py as h5
import numpy as np
import sklearn.decomposition
from dask import array as da
from PIL import Image
from dash_bootstrap_templates import load_figure_template

import ryujin.utils.dash
from irviz.background_isolator import BackgroundIsolator
from irviz.viewer import Viewer

TEST_FILE = 'E:\\BP-area3a.h5'
# TEST_FILE = '/home/ihumphrey/Dev/irviz/data/ir_stxm.h5'
# TEST_FILE = '/home/ihumphrey/Dev/irviz/data/BP-area3a.h5'
OPTICAL_TEST_FILE = 'E:\\BP-area3a_clean.JPG'
# TEST_FILE = '/home/ihumphrey/Dev/irviz/data/BP-area3a.h5'

from sklearn import gaussian_process
from sklearn.gaussian_process.kernels import DotProduct, WhiteKernel, RBF, ConstantKernel as C


def find_nearest(array, value):
    idx = (np.abs(array - value)).argmin()
    return idx


def GPR_based_background_single_spectrum(wavenumbers,
                                         spectrum,
                                         control_points,
                                         control_regions,
                                         mask, # ????????
                                         rbf_start=1000,
                                         rbf_low=500,
                                         rbf_high=1e8,
                                         C_start=1.0,
                                         C_low=1e-6,
                                         C_high=1e4
                                         ):
    """
    Build a background model using GPR

    :param wavenumbers: Input wavenumbers
    :param spectrum: input spectrum
    :param control_points: input control points, poicked manually
    :param rbf_kernel_params: kernel parameters, defaults ok
    :param constant_kernel_params: kernel parameters, defaults ok
    :return: a fitted background.
    """
    # gather the x values
    these_idxs = []
    for cp in control_points:
        these_idxs.append( find_nearest(wavenumbers, cp) )
    these_idxs = np.array(these_idxs)
    these_x = wavenumbers[these_idxs]
    these_y = spectrum[these_idxs]
    kernel = C(C_start,
               (C_low,
                C_high)) * \
             RBF(rbf_start, (rbf_low, rbf_high))

    gpr = gaussian_process.GaussianProcessRegressor(kernel=kernel).fit(these_x.reshape(-1,1),
                                                                       these_y.reshape(-1,1))
    tmp_bg = gpr.predict(wavenumbers.reshape(-1,1))
    return tmp_bg.flatten()


def open_optical_file(jpg_file):
    return np.asarray(Image.open(jpg_file))


def open_map_file(h5_file):
    f = h5.File(h5_file, 'r')
    data = f[next(iter(f.keys()))]['data']['image']['image_cube']
    wavenumbers = f[next(iter(f.keys()))]['data']['wavenumbers'][:]
    xy = f[next(iter(f.keys()))]['data']['xy'][:]
    bounds = [(wavenumbers.min(), wavenumbers.max()),
              (xy.T[1].min(), xy.T[1].max()),
              (xy.T[0].min(), xy.T[0].max())]
    return da.from_array(data).transpose(2, 0, 1), bounds


def open_ir_file(h5_file):
    f = h5.File(h5_file, 'r')
    data = f['irmap']['DATA']['data']
    bounds_grid = f['irmap']['DATA']['energy'][:], f['irmap']['DATA']['sample_y'][:], f['irmap']['DATA']['sample_x'][:]
    bounds = list(map(lambda grid: (grid.min(), grid.max()), bounds_grid))
    print(bounds)
    return da.from_array(data), bounds


if __name__ == "__main__":    # data, bounds = open_ir_file(TEST_FILE)
    data, bounds = open_map_file(TEST_FILE)
    optical = np.flipud(open_optical_file(OPTICAL_TEST_FILE))
    model = sklearn.decomposition.PCA(n_components=3)

    with warnings.catch_warnings():
        # Ignore future warning generated by dask (at worst, we do .compute beforehand, which probably already happens)
        warnings.simplefilter('ignore', FutureWarning)
        reshaped_data = data.transpose(1, 2, 0).reshape(-1, data.shape[0])
        decomposition = model.fit_transform(reshaped_data).T.reshape(-1, *data.shape[1:])

    cluster_labels = np.argmax(decomposition, axis=0)
    cluster_label_names = ['Alpha', 'Bravo', 'Charlie']

    viewer = BackgroundIsolator(data=data,
                                bounds=bounds,
                                background_function=GPR_based_background_single_spectrum)

    viewer.run_server(run_kwargs=dict(debug=True))
